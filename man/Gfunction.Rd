% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Gfunctions.R
\name{Gfunction}
\alias{Gfunction}
\alias{Gfunction6}
\alias{Gfunction12}
\alias{Gfunction18}
\title{The Gfunction Function}
\usage{
Gfunction(x, scale01 = TRUE, a = NULL)

Gfunction6(x, scale01 = TRUE, a = rep(c(0, 6.52), c(2, 4)))

Gfunction12(
  x,
  scale01 = TRUE,
  a = rep(c(0, 6.52, 9, 15, 25, 50, 99), c(2, 4, 2, 1, 1, 1, 1))
)

Gfunction18(x, scale01 = TRUE, a = rep(c(0, 1, 9, 18, 99), c(4, 4, 4, 4, 2)))
}
\arguments{
\item{x}{Inputs of dimension d. See below for details.}

\item{scale01}{(Ignored here) When TRUE, inputs are expected to be given on unit interval and are internally adjusted to their native range. Default is FALSE}

\item{a}{Weight vector of length d (lower value is more important)}
}
\value{
A scalar response
}
\description{
Dimensions: d. A multiplicative function.
}
\details{
The G function function is often used as an integrand for various numerical estimation methods. The exact value of the intregal of this function in any dimensions is 1. The a_i values indicate the importance of a variable (lower value is more important).
\code{Gfunction} takes a 3-dimensional input vector by default but accepts any number of dimension with input i having weight (i-1)/4. \code{Gfunction6} forces all inputs after the p=6th to be inert (similarly for \code{Gfunction12} and \code{Gfunction18} with p=12 and p=18).
For details on the G function function, see \href{https://www.sfu.ca/~ssurjano/fried.html}{the VLSE}.
}
\examples{
n <- 10
x <- matrix(runif(8*n), nrow=n)
y <- apply(x, 1, Gfunction, scale01=TRUE)
}
\references{
Surjanovic, Sonja, and Derek Bingham. "Virtual library of simulation experiments: test functions and datasets." Simon Fraser University, Burnaby, BC, Canada, accessed May 13 (2013): 2015.

Saltelli, A., & Sobol', I. M. (1995). About the use of rank transformation in sensitivity analysis of model output. Reliability Engineering & System Safety, 50(3), 225-239.

Marrel, A., Iooss, B., Van Dorpe, F., & Volkova, E. (2008). An efficient methodology for modeling complex computer codes with Gaussian processes. Computational Statistics & Data Analysis, 52(10), 4731-4744.
}
